buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven {
            name 'Forge'
            url 'https://maven.minecraftforge.net'
        }
        mavenCentral()

        maven {
            name 'ParchmentMC'
            url 'https://maven.parchmentmc.org'
        }

        maven {
            name 'SpongePowered'
            url 'https://repo.spongepowered.org/repository/maven-public'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'

        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply plugin: 'org.spongepowered.mixin'

apply plugin: org.parchmentmc.librarian.forgegradle.LibrarianForgeGradlePlugin

version = '0.0.2'
group = 'net.davoleo'
archivesBaseName = 'crystalglass'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//./gradlew -PUPDATE_MAPPINGS="new mapping version" -PUPDATE_MAPPINGS_CHANNEL="snapshot" updateMappings
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    mappings channel: 'parchment', version: '2023.03.12-1.19.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            property 'forge.logging.console.level', 'debug'

            mods {
                crystalglass {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                crystalglass {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'crystalglass', '--all', '--existing', file('src/main/resources/'), '--output', file('src/generated/resources/')

            mods {
                crystalglass {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

repositories {
    //Hosts REGISTRATE
    maven {
        name = 'tterrag'
        url = 'https://maven.tterrag.com/'
    }

    //Hosts JEI
    maven {
        name = 'Progwml6 Maven'
        url = 'https://dvs1.progwml6.com/files/maven'
    }

    maven {
        url = 'https://cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    mavenLocal()
}

dependencies {

    minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"

    implementation(fg.deobf("com.tterrag.registrate:Registrate:MC$minecraft_version-$registrate_version"))
    jarJar(group: 'com.tterrag.registrate', name: 'Registrate', version: "[MC$minecraft_version,MC$next_mc_version)")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // compile against the JEI API but do not include it at runtime
    //compileOnly fg.deobf("mezz.jei:jei-$minecraft_version-common-api:${jei_version}")
    //compileOnly fg.deobf("mezz.jei:jei-$minecraft_version-forge-api:${jei_version}")
    // at runtime, use the full JEI jar for Forge
    runtimeOnly fg.deobf('curse.maven:jei-238222:4536209')
    //runtimeOnly fg.deobf("mezz.jei:jei-$minecraft_version-forge:${jei_version}")

    //Connected Textures Mod
    //implementation fg.deobf('curse.maven:ctm-267602:4393695')

}

//Changing settings here REQUIRES REGENERATION OF IDE RUNS
mixin {
    add sourceSets.main, "crystalglass.refmap.json"

    config('crystalglass.mixins.json')

    //Mixin Development Settings
    debug.verbose = true
    debug.export = true
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "crystalglass",
                "Specification-Vendor"    : "examplemodsareus",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    //Set jar output to artifacts directory
    getDestinationDirectory().set(file 'artifacts')

    //to avoid conflicts with jarJar
    classifier 'slim'
}

jar.finalizedBy('reobfJar')


jarJar.enable()

reobf {
    jarJar {}
}

tasks.jarJar.configure {
    //removes '-all' from jarJar file
    classifier ''

    getDestinationDirectory().set(file 'artifacts')
}

tasks.jarJar.finalizedBy('reobfJarJar')

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
